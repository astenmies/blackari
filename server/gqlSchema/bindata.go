// Code generated by go-bindata.
// sources:
// gqlSchema/types/mutation.graphql
// gqlSchema/types/post.graphql
// gqlSchema/types/query.graphql
// gqlSchema/types/review.graphql
// gqlSchema/types/reviewInput.graphql
// gqlSchema/types/schema.graphql
// DO NOT EDIT!

package gqlSchema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gqlschemaTypesMutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xf0\x2d\x2d\x49\x2c\xc9\xcc\xcf\x53\xa8\xe6\x52\x50\x50\x50\x48\x2e\x4a\x4d\x2c\x49\x0d\x4a\x2d\xcb\x4c\x2d\xd7\x28\xc8\x2f\x2e\x09\xce\x29\x4d\xb7\x52\x08\x2e\x29\xca\xcc\x4b\x57\xd4\x51\x28\x02\xcb\x58\x29\x40\x54\x78\xe6\x15\x94\x96\x28\x6a\xc2\xb8\x5c\xb5\x80\x00\x00\x00\xff\xff\x66\x4e\x95\x06\x53\x00\x00\x00")

func gqlschemaTypesMutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_gqlschemaTypesMutationGraphql,
		"gqlSchema/types/mutation.graphql",
	)
}

func gqlschemaTypesMutationGraphql() (*asset, error) {
	bytes, err := gqlschemaTypesMutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gqlSchema/types/mutation.graphql", size: 83, mode: os.FileMode(436), modTime: time.Unix(1521903301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gqlschemaTypesPostGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\xc8\x2f\x2e\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\x74\x51\x04\xb3\x8b\x73\x4a\xd3\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x21\x22\x25\x99\x25\x39\xa9\x08\xa1\x5a\x40\x00\x00\x00\xff\xff\x98\xcb\xa3\x23\x3e\x00\x00\x00")

func gqlschemaTypesPostGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_gqlschemaTypesPostGraphql,
		"gqlSchema/types/post.graphql",
	)
}

func gqlschemaTypesPostGraphql() (*asset, error) {
	bytes, err := gqlschemaTypesPostGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gqlSchema/types/post.graphql", size: 62, mode: os.FileMode(436), modTime: time.Unix(1521835901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gqlschemaTypesQueryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\x31\x0e\xc2\x30\x10\x44\xd1\xde\xa7\x98\x88\x26\x34\x1c\x20\xa7\x00\x42\x87\x28\x28\x86\xc4\x92\x65\xaf\x76\xd7\x20\x0b\x71\x77\x84\xe9\x52\xff\xf7\x77\xb8\xac\xc4\xa9\x52\x1b\xbc\x09\xa1\x14\xa5\x31\xbb\xe1\x9e\x12\xca\x03\xbe\x12\xcc\xae\x0d\x52\x62\x76\x3b\x84\x0e\xff\xcf\x3b\x00\x80\x14\xf3\xd1\x52\x5d\x26\xcc\xae\x31\x2f\xc3\x7e\xc2\xb1\x98\xf7\xaa\x7c\x46\xbe\x6c\xfc\xa9\x79\x83\xae\xe7\x1e\x6f\x43\xf8\x7c\x03\x00\x00\xff\xff\x2f\xdd\xb0\xf5\x8b\x00\x00\x00")

func gqlschemaTypesQueryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_gqlschemaTypesQueryGraphql,
		"gqlSchema/types/query.graphql",
	)
}

func gqlschemaTypesQueryGraphql() (*asset, error) {
	bytes, err := gqlschemaTypesQueryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gqlSchema/types/query.graphql", size: 139, mode: os.FileMode(436), modTime: time.Unix(1521903432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gqlschemaTypesReviewGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcd\xb1\x12\x82\x30\x10\x04\xd0\x9e\xaf\x58\x87\x56\x0b\x0b\x1b\x5a\x2b\x5b\xf4\x07\x82\x2e\x90\x22\x09\x73\x77\xe0\x30\x8e\xff\xee\x18\x8c\xe5\xce\xbb\xdb\xad\xd1\x72\x12\x2a\xa3\x29\x1c\x84\x8b\xe7\x13\x7d\x92\x7f\xa8\x6c\x9d\x88\x76\x83\x57\x05\x00\xfe\xd1\xe0\x6a\xe2\xe3\xb0\xcb\xb9\xc6\x6d\x24\xe2\x1c\x3a\x0a\x52\x0f\x35\x27\x0a\x1b\xbd\x96\xc2\xc1\x2d\xdc\xe3\x78\x38\xe5\xfb\xec\x0d\x2e\xd1\x7e\xef\xe7\x14\x02\xa3\xc1\x75\x69\xb6\xb2\xfb\xa5\xfb\x06\x4e\xd6\xb2\x58\xbd\x3f\x01\x00\x00\xff\xff\x93\x2b\x96\xa9\xb3\x00\x00\x00")

func gqlschemaTypesReviewGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_gqlschemaTypesReviewGraphql,
		"gqlSchema/types/review.graphql",
	)
}

func gqlschemaTypesReviewGraphql() (*asset, error) {
	bytes, err := gqlschemaTypesReviewGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gqlSchema/types/review.graphql", size: 179, mode: os.FileMode(436), modTime: time.Unix(1521845168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gqlschemaTypesReviewinputGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xc1\xaa\xc2\x40\x0c\x45\xf7\xfd\x8a\x0b\xdd\xbe\x07\x6e\xdc\x74\xeb\xaa\x5b\xf5\x07\xd2\x12\xda\x88\x93\x0c\x93\xd4\x41\xc4\x7f\x17\xa7\xee\xce\x21\x27\xdc\x1e\xd7\x95\x21\x9a\xb7\x80\x4d\x37\x9e\x03\xce\x1a\xa8\x2b\x2b\xdc\x12\x9b\x32\xc4\x31\x17\xa6\x10\x5d\x40\x50\xae\x28\xfc\x10\xae\xdd\xfe\x77\x6e\x32\x36\x7e\x75\x00\xd0\xe3\xf0\x7f\x84\x07\x15\x6f\xde\x68\xc0\xa8\xf1\x3b\x9f\x2c\xa5\xef\x0c\x4d\xb6\x05\x62\x65\x64\xf3\xf8\x83\xe5\x10\x53\xba\xb7\x6c\xde\x23\x2a\xcf\x01\x97\x28\xa2\x4b\xf7\xfe\x04\x00\x00\xff\xff\x41\x7f\xeb\x55\xb0\x00\x00\x00")

func gqlschemaTypesReviewinputGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_gqlschemaTypesReviewinputGraphql,
		"gqlSchema/types/reviewInput.graphql",
	)
}

func gqlschemaTypesReviewinputGraphql() (*asset, error) {
	bytes, err := gqlschemaTypesReviewinputGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gqlSchema/types/reviewInput.graphql", size: 176, mode: os.FileMode(436), modTime: time.Unix(1521845195, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _gqlschemaTypesSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x16\x10\x00\x00\xff\xff\x8e\x43\x79\x00\x32\x00\x00\x00")

func gqlschemaTypesSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_gqlschemaTypesSchemaGraphql,
		"gqlSchema/types/schema.graphql",
	)
}

func gqlschemaTypesSchemaGraphql() (*asset, error) {
	bytes, err := gqlschemaTypesSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gqlSchema/types/schema.graphql", size: 50, mode: os.FileMode(436), modTime: time.Unix(1521835442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gqlSchema/types/mutation.graphql": gqlschemaTypesMutationGraphql,
	"gqlSchema/types/post.graphql": gqlschemaTypesPostGraphql,
	"gqlSchema/types/query.graphql": gqlschemaTypesQueryGraphql,
	"gqlSchema/types/review.graphql": gqlschemaTypesReviewGraphql,
	"gqlSchema/types/reviewInput.graphql": gqlschemaTypesReviewinputGraphql,
	"gqlSchema/types/schema.graphql": gqlschemaTypesSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gqlSchema": &bintree{nil, map[string]*bintree{
		"types": &bintree{nil, map[string]*bintree{
			"mutation.graphql": &bintree{gqlschemaTypesMutationGraphql, map[string]*bintree{}},
			"post.graphql": &bintree{gqlschemaTypesPostGraphql, map[string]*bintree{}},
			"query.graphql": &bintree{gqlschemaTypesQueryGraphql, map[string]*bintree{}},
			"review.graphql": &bintree{gqlschemaTypesReviewGraphql, map[string]*bintree{}},
			"reviewInput.graphql": &bintree{gqlschemaTypesReviewinputGraphql, map[string]*bintree{}},
			"schema.graphql": &bintree{gqlschemaTypesSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

